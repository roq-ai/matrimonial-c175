generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model company {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model match {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status     String?      @db.VarChar(255)
  profile_id String       @db.Uuid
  created_at DateTime     @default(now()) @db.Timestamp(6)
  updated_at DateTime     @default(now()) @db.Timestamp(6)
  profile    profile      @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  suggestion suggestion[]
}

model profile {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  age        Int?
  location   String?      @db.VarChar(255)
  occupation String?      @db.VarChar(255)
  status     String?      @db.VarChar(255)
  user_id    String       @db.Uuid
  created_at DateTime     @default(now()) @db.Timestamp(6)
  updated_at DateTime     @default(now()) @db.Timestamp(6)
  match      match[]
  user       user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  suggestion suggestion[]
}

model query {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  issue      String?  @db.VarChar(255)
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model suggestion {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  match_id   String   @db.Uuid
  profile_id String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  match      match    @relation(fields: [match_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profile    profile  @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String    @unique @db.VarChar(255)
  firstName   String?   @db.VarChar(255)
  lastName    String?   @db.VarChar(255)
  roq_user_id String    @db.VarChar(255)
  tenant_id   String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  company     company[]
  profile     profile[]
  query       query[]
}
